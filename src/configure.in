dnl Process this file with autoconf to produce a configure script.
AC_INIT(mudconf.h)
AC_CONFIG_HEADER(autoconf.h)

dnl Option checks

if test "$#" -gt 0; then
  CONFIGURE_CMD="$0 $*"
else
  CONFIGURE_CMD="$0"
fi
AC_SUBST(CONFIGURE_CMD)

AC_MSG_CHECKING(whether to build with SQL support)
AC_ARG_WITH(sql,
  [  --with-sql=TYPE         build with support for SQL database connection
                          (TYPE can be mysql or msql) [default=no]],
  [
    case "$withval" in
      msql) SQL_OBJ="db_msql.o"
              AC_MSG_RESULT(msql) ;;
      mysql) SQL_OBJ="db_mysql.o"
               AC_MSG_RESULT(mysql) ;;
      *) SQL_OBJ="db_empty.o"
           AC_MSG_RESULT(no) ;;
    esac
  ], SQL_OBJ="db_empty.o"
       AC_MSG_RESULT(no))
AC_SUBST(SQL_OBJ)

AC_MSG_CHECKING(for location of SQL header files)
AC_ARG_WITH(sql-inc,
  [  --with-sql-inc=PATH     set the include path for SQL header files
                          [default for msql=/usr/local/Hughes/include]
                          [default for mysql=/usr/local/include/mysql]],
  [
    case "$with_sql" in
      msql | mysql) SQL_INC="-I$withval"
                      AC_MSG_RESULT($withval) ;;
      *) AC_MSG_RESULT(none) ;;
    esac
  ], [
    case "$with_sql" in
      msql) SQL_INC="I/usr/local/Hughes/include"
              AC_MSG_RESULT(/usr/local/Hughes/include) ;;
      mysql) SQL_INC="-I/usr/local/include/mysql"
               AC_MSG_RESULT(/usr/local/include/mysql) ;;
      *) AC_MSG_RESULT(none) ;;
    esac
  ])
AC_SUBST(SQL_INC)

AC_MSG_CHECKING(for location of SQL library files)
AC_ARG_WITH(sql-libs,
  [  --with-sql-libs=PATH    set the library path for SQL library files
                          [default for msql=/usr/local/Hughes/lib]
                          [default for mysql=/usr/local/lib/mysql]],
  [
    case "$with_sql" in
      msql | mysql) SQL_LIB="-L$withval"
                      AC_MSG_RESULT($withval) ;;
      *) AC_MSG_RESULT(none) ;;
    esac
  ], [
    case "$with_sql" in
      msql) SQL_LIB="L/usr/local/Hughes/lib"
              AC_MSG_RESULT(/usr/local/Hughes/lib) ;;
      mysql) SQL_LIB="-L/usr/local/lib/mysql"
               AC_MSG_RESULT(/usr/local/lib/mysql) ;;
      *) AC_MSG_RESULT(none) ;;
    esac
  ])

AC_MSG_CHECKING(whether to enable disk-based database)
AC_ARG_ENABLE(disk-based,
  [  --enable-disk-based     store the database on disk using a DBM hashfile,
                          and cache some attributes in a limited amount of
                          memory. The alternative is memory-based, where the
                          database is kept in memory. Disk-based uses less
                          memory and more disk space. Disabling the disk-based
                          cache can improve performance if enough memory is
                          available. [default=yes]],
  [
    if test "x$enableval" = "xno"; then
      AC_DEFINE(MEMORY_BASED)
      AC_MSG_RESULT(no)
    else
      UDB_S="udb_ocache.c udb_ochunk.c udb_obj.c udb_misc.c"
      UDB_O="udb_ocache.o udb_ochunk.o udb_obj.o udb_misc.o"
      UDB_INC="udb.h udb_defs.h"
      AC_MSG_RESULT(yes)
    fi
  ], [
    UDB_S="udb_ocache.c udb_ochunk.c udb_obj.c udb_misc.c"
    UDB_O="udb_ocache.o udb_ochunk.o udb_obj.o udb_misc.o"
    UDB_INC="udb.h udb_defs.h"
    AC_MSG_RESULT(yes)
  ])
AC_SUBST(UDB_S)
AC_SUBST(UDB_O)
AC_SUBST(UDB_INC)

AC_MSG_CHECKING(whether to enable radix compression)
AC_ARG_ENABLE(radix-compression,
  [  --enable-radix-compression
                          use radix tree string compression. This will reduce
                          memory and disk usage. You MUST carefully read
                          README.COMPRESSION and follow the instructions
                          exactly before you enable this, or you may cause
                          damage to your database. NOTE: You should have a
                          fairly large database before you begin to use radix
                          compression. [default=no]],
  [
    if test "x$enableval" = "xno"; then
      AC_MSG_RESULT(no)
    else
      AC_DEFINE(RADIX_COMPRESSION)
        AC_MSG_RESULT(yes)
    fi
  ], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to enable port concentrator)
AC_ARG_ENABLE(concentrator,
  [  --enable-concentrator   use the port concentrator (not included with
                          the main distribution) if you hit resource limits
                          when too many connections are open at once (talk
                          to David) [default=no]],
  [
    if test "x$enableval" = "xno"; then
      AC_MSG_RESULT(no)
    else
      CONC_S="newconc.c"
      CONC_O="newconc.o"
      AC_DEFINE(CONCENTRATE)
      AC_MSG_RESULT(yes)
    fi
  ], AC_MSG_RESULT(no))
AC_SUBST(CONC_S)
AC_SUBST(CONC_O)

AC_MSG_CHECKING(for which version of malloc to use)
AC_ARG_WITH(malloc,
  [  --with-malloc=TYPE      build with a particular malloc package.
                          TYPE can be sys (use your system libraries),
                          gnu (use our copy of GNU malloc), or trace (use
                          our GNU malloc with mtrace turned on). If your
                          system malloc library is broken for some reason,
                          try gnu. Don't use trace unless you're debugging
                          a memory leak or corruption problem and you're
                          willing to put up with the performance hit. Try
                          using Purify (make netmush-pure) if you have it.
                          [default=sys]],
  [
     case "$withval" in
       gnu)
         MALLOC_S="malloc.c"
         MALLOC_O="malloc.o"
         AC_MSG_RESULT(gnu)
         ;;
       trace)
         MALLOC_S="malloc.c mcheck.c mstats.c mtrace.c"
         MALLOC_O="malloc.o mcheck.o mstats.o mtrace.o"
         AC_DEFINE(MCHECK)
         AC_DEFINE(MTRACE_FILE,"mtrace.out")
         AC_MSG_RESULT(trace)
         ;;
       *)
         AC_MSG_RESULT(sys)
         ;;
     esac 
  ], AC_MSG_RESULT(sys))
AC_SUBST(MALLOC_S)
AC_SUBST(MALLOC_O)

AC_MSG_CHECKING(whether to build with Pueblo support)
AC_ARG_ENABLE(pueblo,
  [  --enable-pueblo         build with support for Pueblo client
                          [default=yes]],
  [
    if test "x$enableval" = "xno"; then
      AC_MSG_RESULT(no)
    else
      AC_DEFINE(PUEBLO_SUPPORT)
        AC_MSG_RESULT(yes)
    fi
  ], AC_DEFINE(PUEBLO_SUPPORT)
       AC_MSG_RESULT(yes))

AC_MSG_CHECKING(whether to use included comsys)
AC_ARG_ENABLE(comsys,
  [  --enable-comsys         build with included hardcode channel system
                          (If you do build the comsys, you can always turn
                          it off at runtime by putting 'have_comsys no' in
                          your conf file.) [default=yes]],
  [
    if test "x$enableval" = "xno"; then
      AC_MSG_RESULT(no)
    else
      AC_DEFINE(USE_COMSYS)
        AC_MSG_RESULT(yes)
    fi
  ], AC_DEFINE(USE_COMSYS)
       AC_MSG_RESULT(yes))

AC_MSG_CHECKING(whether to use included mailer)
AC_ARG_ENABLE(mailer,
  [  --enable-mailer         build with included hardcode mail system
                          (If you do build the mailer, you can always turn
                          it off at runtime by putting 'have_mailer no' in
                          your conf file.) [default=yes]],
  [
    if test "x$enableval" = "xno"; then
      AC_MSG_RESULT(no)
    else
      AC_DEFINE(USE_MAIL)
        AC_MSG_RESULT(yes)
    fi
  ], AC_DEFINE(USE_MAIL)
       AC_MSG_RESULT(yes))

AC_MSG_CHECKING(whether to use floating-point math)
AC_ARG_ENABLE(fpmath,
  [  --enable-fpmath         build math functions (lt, gt, add, etc.) with
                          IEEE 754 floating-point support instead of allowing
                          only integer calculations [default=yes]],
  [
    if test "x$enableval" = "xno"; then
      AC_MSG_RESULT(no)
    else
      AC_DEFINE(FLOATING_POINTS)
        AC_MSG_RESULT(yes)
    fi
  ], AC_DEFINE(FLOATING_POINTS)
       AC_MSG_RESULT(yes))

AC_MSG_CHECKING(whether to enable command lag detection)
AC_ARG_ENABLE(lag-checking,
  [  --enable-lag-checking   enable warnings that a certain command has
                          exceeded a certain amount of wall-clock time to
                          execute. Disable this if you have severe problems
                          with computational resources on your host machine.
                          [default=yes]],
  [
    if test "x$enableval" = "xno"; then
      AC_DEFINE(NO_LAG_CHECK)
        AC_MSG_RESULT(no)
    else
      AC_MSG_RESULT(yes)
    fi
  ], AC_MSG_RESULT(yes))

AC_MSG_CHECKING(whether to enable per-object time usage tracking)
AC_ARG_ENABLE(time-checking,
  [  --enable-time-checking  enable tracking of the amount of wall-clock time
                          that individual objects are using. Disable this
                          if you have severe problems with computational
                          resources on your host machine. (This is assumed to
                          be disabled if lag-checking is disabled)
                          [default=yes]],
  [
    if test "x$enableval" = "xno"; then
      AC_DEFINE(NO_TIMECHECKING)
        AC_MSG_RESULT(no)
    else
      AC_MSG_RESULT(yes)
    fi
  ], AC_MSG_RESULT(yes))

AC_MSG_CHECKING(whether to enable cpu time checking)
AC_ARG_ENABLE(cpu-checking,
  [  --enable-cpu-checking   for lag-checking and time-checking features,
                          use CPU time reported with getrusage() instead
                          of tracking wall-clock time. This is more accurate
                          but also more computationally expensive
                          [default=no]],
  [
    if test "x$enableval" = "xno"; then
      AC_MSG_RESULT(no)
    else
      AC_DEFINE(TRACK_USER_TIME)
        AC_MSG_RESULT(yes)
    fi
  ], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to enable malloc-logging macros)
AC_ARG_ENABLE(malloc-logging,
  [  --enable-malloc-logging use wrapper macros for malloc(), free(), and
                          related functions to print log messages when the
                          functions are called. This can be useful for
                          tracking down memory leaks, but it is spammy;
                          try other debugging tools first [default=no]],
  [
    if test "x$enableval" = "xno"; then
      AC_MSG_RESULT(no)
    else
      AC_DEFINE(TEST_MALLOC)
        AC_MSG_RESULT(yes)
    fi
  ], AC_MSG_RESULT(no))

AC_MSG_CHECKING(how many global registers to use)
AC_ARG_WITH(global-regs,
  [  --with-global-regs=N    use N global registers (%q0-%q9,%qa-%qz)
                          N must be a number from 10 to 36. Set lower
                          to conserve memory if you don't need all the
                          possible registers [default=36]],
  [
    if test "$withval" -lt "10"; then
      AC_DEFINE(MAX_GLOBAL_REGS,10)
        AC_MSG_RESULT(10)
    elif test "$withval" -gt "36"; then
      AC_DEFINE(MAX_GLOBAL_REGS,36)
        AC_MSG_RESULT(36)
    else
      AC_DEFINE_UNQUOTED(MAX_GLOBAL_REGS,$withval)
        AC_MSG_RESULT($withval)
    fi
  ], AC_DEFINE(MAX_GLOBAL_REGS,36)
       AC_MSG_RESULT(36))

dnl Program checks

AC_PROG_CC
AC_PROG_CPP

dnl Make sure we're properly linked dynamically

if test "$GCC" = yes; then
LINKOPTS="-rdynamic"
AC_SUBST(LINKOPTS)
fi

dnl Platform checks

AC_ISC_POSIX
AC_MINIX
AC_AIX

dnl Library checks

SAVELDFLAGS="$LDFLAGS"

case "$enable_radix_compression" in
  yes)
    LDFLAGS="-L./radixlib $SAVELDFLAGS"
    AC_CHECK_LIB(compress, main,
      LIBS="-L./radixlib -lcompress $LIBS",
      AC_MSG_ERROR(Using radix compression requires the compress library (src/radixlib) to be built first), )
    ;;
esac

LDFLAGS="-L./gdbm-1.8.0/.libs $SAVELDFLAGS"
AC_CHECK_LIB(gdbm, main,
  LIBS="-L./gdbm-1.8.0/.libs -lgdbm $LIBS",
  AC_MSG_ERROR(This program requires GNU DBM (src/gdbm-1.8.0) to be built first), )

case "$with_sql" in
  msql)
    LDFLAGS="$SQL_LIB $SAVELDFLAGS"
    AC_CHECK_LIB(msql, main,
      LIBS="$SQL_LIB -lmsql $LIBS",
      AC_MSG_ERROR(unable to build with msql), ) ;;
  mysql)
    LDFLAGS="$SQL_LIB $SAVELDFLAGS"
    AC_CHECK_LIB(mysqlclient, main,
      LIBS="$SQL_LIB -lmysqlclient $LIBS",
      AC_MSG_ERROR(unable to build with mysql), ) ;;
esac

LDFLAGS="-L/usr/ucblib $SAVELDFLAGS"
AC_CHECK_LIB(ucb, getdtablesize,
  LIBS="-L/usr/ucblib -lucb $LIBS", , , )
LDFLAGS="$SAVELDFLAGS"
AC_CHECK_LIB(crypt, main)
AC_CHECK_LIB(resolv, main)
AC_CHECK_LIB(socket, main)
AC_CHECK_LIB(nsl, main)
AC_CHECK_LIB(inet, gethostbyaddr)
AC_CHECK_LIB(m, main)
AC_CHECK_LIB(dl, dlopen)

dnl Header checks

AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(unistd.h memory.h string.h errno.h malloc.h sys/select.h)
AC_CHECK_HEADERS(fcntl.h limits.h sys/file.h sys/ioctl.h sys/time.h sys/stat.h)

dnl Structure, Typedef, Compiler checks

AC_C_CONST
AC_C_CHAR_UNSIGNED
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIGNAL
AC_STRUCT_TM
AC_STRUCT_TIMEZONE
AC_MSG_CHECKING(for struct linger)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/socket.h>],
[struct linger ling; ling.l_onoff = 1;],
AC_DEFINE(HAVE_LINGER) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
AC_MSG_CHECKING(for union wait)
AC_TRY_COMPILE([#include <sys/wait.h>],[union wait stat;],
  AC_DEFINE(HAVE_UNION_WAIT)
    AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no))

AC_MSG_CHECKING(for signal SIGCHLD braindamage)
AC_TRY_RUN([
#include <sys/types.h>
#include <signal.h>

#ifndef SIGCHLD
#define SIGCHLD SIGCLD
#endif

int rlev;

RETSIGTYPE sighand(sig)
int sig;
{
  int stat;

  if (rlev++ > 2)
    exit(1);
  signal(SIGCHLD, sighand);
  wait(&stat);
  return;
}

main(argc, argv)
int argc;
char **argv;
{

  rlev = 0;
  signal(SIGCHLD, sighand);
  if (fork()) {
    sleep(10);
  } else {
    sleep(2);
    exit(1);
  }
  exit(0);
}
], AC_MSG_RESULT(no),
  AC_DEFINE(SIGNAL_SIGCHLD_BRAINDAMAGE)
    AC_MSG_RESULT(yes),
  AC_DEFINE(SIGNAL_SIGCHLD_BRAINDAMAGE)
    AC_MSG_RESULT(unable to test... assuming yes))

AC_MSG_CHECKING(for broken small struct padding)
AC_TRY_RUN([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

main(argc, argv)
int argc;
char **argv;
{
  struct in_addr addr;
  char *dq;

  addr.s_addr = htonl(0x01020304);
  dq = inet_ntoa(addr);
  if (dq[0] != '1' || dq[1] != '.' || dq[2] != '2' || dq[3] != '.' ||
      dq[4] != '3' || dq[5] != '.' || dq[6] != '4' || dq[7] != '\0')
    return 1;
  return 0;
}],AC_MSG_RESULT(no),
  AC_DEFINE(BROKEN_GCC_PADDING)
    AC_MSG_RESULT(yes),
  AC_DEFINE(BROKEN_GCC_PADDING)
    AC_MSG_RESULT(unable to test... assuming yes))

AC_MSG_CHECKING(whether dlsym needs an underscore)
AC_TRY_RUN([
#include <dlfcn.h>

main(argc, argv)
int argc;
char **argv;
{
  void *handle;

  if ((handle = dlopen((char *)0, RTLD_NOW|RTLD_GLOBAL)) != (void *)0)
    if (dlsym(handle, "_dlopen") && !dlsym(handle, "dlopen"))
      return 0;

  return 1;
}],AC_DEFINE(DLSYM_NEEDS_UNDERSCORE)
     AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no),
  AC_MSG_RESULT(unable to test... assuming no))

dnl Function checks

AC_FUNC_VFORK
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(setrlimit getrusage timelocal mktime srandom)
AC_CHECK_FUNCS(getdtablesize socket gethostbyaddr)
AC_CHECK_FUNCS(gettimeofday select wait3 strtok_r strcspn)
AC_CHECK_FUNCS(getpagesize strchr memset dlopen)

dnl Declaration checks

AC_DECL_SYS_SIGLIST
AC_MSG_CHECKING(for sys_errlist decl)
if test $ac_cv_header_errno_h = no; then
	AC_MSG_RESULT(no)
	AC_DEFINE(NEED_SYS_ERRLIST_DCL)
else
	AC_EGREP_HEADER(sys_errlist,errno.h,AC_MSG_RESULT(yes),AC_EGREP_HEADER(sys_errlist,stdio.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_SYS_ERRLIST_DCL) AC_MSG_RESULT(no)))
fi
AC_MSG_CHECKING(for getpagesize dcl)
AC_EGREP_HEADER(getpagesize,unistd.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_GETPAGESIZE_DCL) AC_MSG_RESULT(no))
AC_MSG_CHECKING(for malloc dcl)
AC_EGREP_HEADER(realloc,stdlib.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_MALLOC_DCL) AC_MSG_RESULT(no))
AC_MSG_CHECKING(for vsprintf dcl)
AC_EGREP_HEADER(vsprintf,stdio.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_VSPRINTF_DCL) AC_MSG_RESULT(no))
AC_MSG_CHECKING(for sprintf dcl)
AC_EGREP_HEADER(\<sprintf|\<*sprintf,stdio.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_SPRINTF_DCL) AC_MSG_RESULT(no))
AC_MSG_CHECKING(for extended stdio dcls)
AC_EGREP_HEADER(fread,stdio.h,AC_DEFINE(EXTENDED_STDIO_DCLS) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
AC_MSG_CHECKING(for extended socket dcls)
AC_EGREP_HEADER(setsockopt,sys/socket.h,AC_DEFINE(EXTENDED_SOCKET_DCLS) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
AC_MSG_CHECKING(for gettimeofday dcl)
if test $ac_cv_header_time = yes && test $ac_cv_header_sys_time_h = yes ; then
AC_EGREP_HEADER(gettimeofday,[time.h>
#include <sys/time.h],AC_MSG_RESULT(yes),AC_DEFINE(NEED_GETTIMEOFDAY_DCL) AC_MSG_RESULT(no))
elif test $ac_cv_header_sys_time_h = yes ; then
AC_EGREP_HEADER(gettimeofday,sys/time.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_GETTIMEOFDAY_DCL) AC_MSG_RESULT(no))
else
AC_EGREP_HEADER(gettimeofday,time.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_GETTIMEOFDAY_DCL) AC_MSG_RESULT(no))
fi
if test $ac_cv_header_sys_wait_h = yes ; then
AC_MSG_CHECKING(for wait3 dcl)
AC_EGREP_HEADER(wait3,sys/wait.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_WAIT3_DCL) AC_MSG_RESULT(no))
fi
AC_MSG_CHECKING(for srandom dcl)
AC_EGREP_HEADER(srandom,math.h,AC_MSG_RESULT(yes),AC_EGREP_HEADER(srandom,stdlib.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_SRANDOM_DCL) AC_MSG_RESULT(no)))
AC_MSG_CHECKING(for random dcl)
AC_EGREP_HEADER(extern * random,stdlib.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_RANDOM_DCL) AC_MSG_RESULT(no))
AC_MSG_CHECKING(for perror dcl)
AC_EGREP_HEADER(perror,errno.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_PERROR_DCL) AC_MSG_RESULT(no))
AC_MSG_CHECKING(for getrusage dcl)
AC_EGREP_HEADER(getrusage,sys/resource.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_GETRUSAGE_DCL) AC_MSG_RESULT(no))
AC_MSG_CHECKING(for getrlimit dcl)
AC_EGREP_HEADER(getrlimit,sys/resource.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_GETRLIMIT_DCL) AC_MSG_RESULT(no))
AC_MSG_CHECKING(for strtok_r dcl)
AC_EGREP_HEADER(strtok_r,string.h,AC_MSG_RESULT(yes),AC_DEFINE(NEED_STRTOK_R_DCL) AC_MSG_RESULT(no))

AC_SUBST(LIBOBJS)
AC_OUTPUT(Makefile)
