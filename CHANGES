This document details changes for TinyMUSH 3 "mainline" releases, 
as well as bugfix updates issued against those mainline releases.

For changes between beta versions, consult the BETA document. 

=============================================================================
			TinyMUSH 3.1 Changes
=============================================================================

TinyMUSH 3.0 beta 1 was released on ?????.

-----------------------------------------------------------------------------

CHANGES TO THE BASE SERVER AND SERVER CONFIGURATION

- A new script, Update, automatically downloads and applies official patches
  to TinyMUSH 3.

- The Backup, Restore, and Archive scripts can now look at a backups
  directory (set in mush.config).

- Dynamically loadable modules. There is now an interface for writing your
  own hardcode extensions to the server, and loading them at runtime.
  The comsys and mailer are now loadable modules; the USE_COMSYS and 
  USE_MAIL #ifdef's and the have_comsys and have_mailer conf directives
  are no longer needed.

- Many changes and improvements to caching.

  - Instead of starting the cache at some fixed width and depth, and
    growing the depth (but not the width) to whatever size is demanded by
    the game, which can cause "cache bloat" if a very large number of
    objects gets loaded into the cache as part of a single operation,
    the total size of the cache is fixed -- the amount of memory that
    the cached data takes cannot exceed a specified limit.

  - The attribute list for each object is now cached, which speeds up
    attribute lookups, and removes the necessity to pull the entire
    object from the cache if we're just looking for an attribute that
    turns out to be non-existent on the object.

  - Removal of elements from the cache is based on "least recently used"
    rather than "not frequently used".

  - Attribute caching is now used, with cache bypass in situations where
    this is not efficient.

  - @list cache now shows the number of recent references to each listed
    object.

- Extensive work on improving autoconf and libtool use (thus improving
  portability). Compile-time options are now specified as switches to
  the configure script.

- Help entries can now have multiple index terms.

- A new conf parameter, attr_type, allows attributes whose names match
  certain wildcard patterns to be given certain default flags. Attribute
  names can now start with '_'. (To implement a rule like, "All attributes
  whose names start with '_' can only be set by wizards," you would add,
  "attr_type _* wizard" to your conf file.)

- A new conf parameter, database_home, has been introduced. This is
  the directory where all the database files are stored. This eliminates
  the necessity to provide a directory path for input_database, etc.

- New conf parameters exit_proto, room_proto, etc. allow one object of
  each type to be defined as the "prototype" for new objects of that
  type. When an object of that type is created, it copies the flags,
  parent, zone (if 'autozone' is off), and attributes of the prototype;
  the effect is similar to cloning.

- New conf parameters exit_attr_defaults, room_attr_defaults, etc.
  allow one object of each type to be defined as the repository for
  "attribute defaults" for many built-in attributes, such as
  attr/oattr pairs (@desc, @odesc, @succ, @osucc, etc.), @conformat,
  and @exitformat. These defaults override the attributes set on
  objects of that type (the local value of the attribute is passed
  to it as %0, for evaluation). This allows the global definition
  of formats for those attributes, without requiring a global
  parenting scheme or an unusual attribute naming scheme.

- The new conf parameter function_cpu_limit allows you to set a limit
  for the number of seconds of CPU time that can be taken up by
  function evaluations associated with a command.

- The new conf parameters guest_basename, guest_prefixes, guest_suffixes,
  and guest_password allow flexible naming of guests. See the FAQ for
  details. (The guest_prefix parameter is now obsolete, and has been
  removed.)

- The new conf parameter power_alias allows you to set aliases for
  powers. The compat.conf file now contains aliases for mapping PennMUSH
  and TinyMUX power names.

- The new conf parameter visible_wizards (disabled by default) results
  in DARK wizards being hidden from WHO (and related things), but not
  being invisible and silent. This prevents accidental or deliberate
  spying by DARK wizards.

- Last-accessed and last-modified timestamps are now tracked for all
  objects. The timestamps are visible on an 'examine', and the seconds-value
  can be retrieved via the new functions lastaccess() and lastmod().

- Garbage is trimmed from the top of the database, if possible, reducing
  bloat due to tail-end garbage.

- A new attribute, LastIP, tracks the last IP address of a player.
  When Lastsite is set, the identd user and hostname are no longer
  truncated.

- General visibility of an attribute is now consistently controlled by the
  'visual' attribute flag (previously it was controlled by 'private' on the
  global attribute definition, and 'visual' on the specific attribute).
  Attributes default to not visual; if you were previously defining global
  attributes with '!private' (via @attribute/access, user_attr_access, etc.)
  you should now define them as 'visual'. Databases are automatically
  converted to have the appropriate attribute flags.

- Visibility restrictions on attributes have been sanitized, so they are
  consistent across commands and functions. This changes the behavior of
  get() and related functions, which now return #-1 PERMISSION DENIED
  rather than #-1 TOO FAR AWAY TO SEE when attempting to read a remote
  @desc without permission.

-----------------------------------------------------------------------------

CHANGES TO FLAGS AND POWERS

- If a wizard connects while DARK, they are reminded that they are
  currently set DARK. Also, wizards are notified when they are set
  DARK due to idle-wizards-being-set-dark.

- There is a new type of lock, the DarkLock, which controls whether or
  not a player sees an object as DARK. Based loosely on a patch by
  Malcolm Campbell (Calum).

- The new ORPHAN flag, when set on an object, prevents the object from
  inheriting $-commands from its parents (just like objects in the master
  room do not inherit $-commands from their parents). This allows you to
  @parent a command object to a data object, without worrying about the
  overhead of scanning the data object for $-commands.

- @filter, @infilter, and @listen do regular expression matches if
  set 'regexp'. They do not evaluate themselves before matching,
  if set 'no_parse'.

- A new attribute flag, 'case', controls whether regular expression matching
  is case-sensitive, for $-commands, ^-listens, @filter, @infilter, and
  @listen.

-----------------------------------------------------------------------------

CHANGES TO COMMANDS

- A new command, @floaters, shows floating rooms. Floating rooms are no
  longer reported by @dbck, and thus the FLOATING flag has been eliminated
  (since it's no longer needed to suppress @dbck spam).

- The @emit, @femit, @fpose, page, pose, and say commands now take a
  /noeval switch. (Analogous to the /noeval switch for @pemit.)

- The new /permit switch to @hook allows the permissions for a built-in
  command to be defined via a user-defined function.

- The new Spoof comsys flag, when set on a channel, replaces player names
  with their comtitles, instead of prepending the comtitle to the player
  name.

- Some commands that would normally be queued can now be executed
  immediately, using the /now switch: @dolist/now (@iter), @force/now,
  @switch/now (@branch), @trigger/now (@call), @verb/now
  force() and trigger() now behave like @force/now and @trigger/now.
  The new conf parameters command_invocation_limit and 
  command_recursion_limit are used to limit this behavior.

- Commands added via @addcommand are now run immediately.

- @cpattr can copy multiple attributes at a time.

- The global flags for attributes are now shown in parentheses, when
  an object is examined.

- Functions defined via @function can be listed via @function/list.

- Function permissions can be listed via @list func_permissions.

- The new @log command can be used to log arbitrary messages to the
  logfile(s).

- When you log in, you are warned if you are currently in the midst
  of writing a @mail message.

- The new @redirect command can be used to redirect Trace, Puppet, and
  Verbose output from an object, to a player other than the object's
  owner. The REDIR_OK flag allows an object's output to be redirected
  by someone who does not control it, thus allowing non-Wizards to
  participate in mutual debugging sessions. Based on an idea from
  AlloyMUSH.

- A @dbck is automatically done before a @restart or normal @shutdown,
  so recycling cleanup is done first, thus avoiding inconsistencies
  upon startup.

- The @teleport command can now be used on exits. Players with the
  Open_Anywhere power can now drop or @teleport exits to any location.

- Specifying an object to @trigger is now optional; if no object is
  specified, the object defaults to 'me'.

-----------------------------------------------------------------------------

CHANGES TO FUNCTIONS

- The number of global registers is now configurable, from 10 to 36.
  Beyond %q0-%q9 are %qa-%qz. Based on an idea from PennMUSH.

- The caller of a function can now be tracked via %@; it's normally equal
  to the enactor, except where u()-type functions, including objeval()
  and @functions, are called. This provides better security-checking
  capabilities. Based on an idea from PennMUSH.

- Extended regular expression syntax from Perl 5 is now supported.
  This is based on the PCRE library, as modified by the PennMUSH team.

- New regular expression functions: regedit(), regediti(), regeditall(),
  regeditalli(), regrab(), regrabi(), regraball(), regraballi(),
  regrep(), regrepi(), regmatchi(), regparsei().

- Added a variety of comsys-related functions: comalias(), comdesc(),
  cominfo(), comlist(), comowner(), comtitle(), cwhoall().

- The filter(), filterbool(), map(), and while() functions pass the
  position of the element in the list as %1. fold() passes the position
  of the element in the list as %2. foreach() passes the position of
  the character in the string (starting from position 0). Based on
  an idea from PennMUSH.

- The idle(), conn(), and doing() functions can now take a port number.

- The escape(), secure(), capstr(), lcstr(), and ucstr() functions now
  handle ANSI properly.

- Added cand(), cor(), candbool(), and corbool(), similar to and() etc.,
  except these functions stop evaluating their arguments once a terminating
  conclusion is reached. Based on an idea from PennMUSH.

- chomp() can now handle a lone CR or LF.

- You can now get attribute flags with flags(<obj>/<attr>). Based on an
  idea from PennMUSH.

- Added graball(), which is to grab() what matchall() is to match().

- Added ilev(), itext(), and inum() functions, for retrieving data
  from multiple levels of nested iter()-type functions. Based on
  an idea from PennMUSH.

- Added ledit() function, a mass find-and-replace on a list which can
  replace many instances of nested edit() calls.

- The ljust(), rjust(), and center() functions can take multi-character
  fills.

- The lunion(), linter(), and ldiff() functions are similar to setunion(),
  etc., but an attempt is made to autodetect the list type and sort
  accordingly, or you can specify a sort type, as you can with sort().

- The modify() function now takes lists, enabling multiple variables
  to be modified at once.

- The behavior of remainders in division with negative numbers is
  now consistent (rather than being compiler-dependent), including
  new modulo(), remainder(), and floordiv() functions. The mod()
  function is now an alias for modulo(); if you want it to be an
  alias for remainder() instead, change it in alias.conf

- Added nattr(), which counts the number of attributes on an object.

- sees() can now evaluate the visibility of exits as well as things.
  Also, a small bug has been fixed: the see_owned_dark calculation in
  sees() now uses the object doing the looking, not the player invoking
  the function.

- Added session(), which returns command count, bytes of input, and
  bytes of output associated with a port.

- Added store(), which is basically to setx() what setr() is to setq().

- Added until() function, which is similar to while(), except it operates
  on multiple lists and terminates on a regular expression condition.

- Added whentrue() and whenfalse() functions, which go through a list
  iter()-style until a terminating boolean condition is reached.

- Added wildgrep(), wildmatch(), and wildparse(), which are similar to
  regrep(), regmatch() and regparse(), but work against wildcard patterns
  rather than regexps.

-----------------------------------------------------------------------------

OTHER CHANGES

- Improvement in logging facilities.

- Dynamic allocation of string conf parameters.

- Break-out of functions into many files, sorted by function type.
  Break-out of the command tables into a separate file, for ease of
  maintenance.

- Other cleanup in many parts of the code, including performance enhancements
  and portability improvements.

=============================================================================
			TinyMUSH 3.0 Changes
=============================================================================

This change list details user-visible or otherwise highly significant
changes in TinyMUSH 3.0. The bugfixes and general code reworking done
in the course of merging TinyMUSH 2.2 and TinyMUX line-by-line, as
well as throughout an extensive cleanup, bugfix, and
performance-enhancement effort, is too extensive and complex to
readily be listed here.

Note that these are only changes that are completely new to both
TinyMUSH 2.2 and TinyMUX; enhancements that were in one server but not
the other have been listed in the conversion notes for both servers.

TinyMUSH 3.0 beta 1 was released on September 27th, 1999.
The "full", gamma release of TinyMUSH 3.0 is dated December 1st, 2000.

-----------------------------------------------------------------------------

CHANGES TO THE BASE SERVER AND SERVER CONFIGURATION

- Build script allows "single-step" configuration, build, and installation.

- Backup and Restore scripts simplify backup maintenance. Archive script
  allows the archival of all the important files.

- Index script detects help-style files (help, news, etc.) and indexes
  them. This is now called by Startmush.

- Bug reporting is easier, via the ReportCrash script, which analyzes
  core files and emails the results to the bug reporting address.

- GNU dbm 1.8.0 is required. Database code has been rewritten to take
  advantage of its features. Dumps are now automatically optimized (though
  you can turn this off using the new conf parameter opt_frequency), and
  you may safely back up the MUSH while it is running, either internally
  (through @dump/flatfile) or externally (through the Backup script).

- An interface to an external SQL database is now supported, through
  the SQL() function and supporting administrative commands. Currently,
  modules for mSQL and MySQL are available.

- There is now a generic indexed-textfile facility, allowing 'news'-like
  commands and their associated files to be specified via the 'helpfile'
  and 'raw_helpfile' parameters in the conf file.

- The readability of a configuration parameter can be set via the
  config_read_access param, and can be listed with @list config_read_perms.
  A config() function allows players to obtain the value of a configuration
  parameter that they have permission to read.

- The new game_log and divert_log parameters allow the logs for different
  types of events to be sent to different files. The new @logrotate
  command allows these logfiles to be rotated while the game is running.
  Logfiles are also rotated when a @restart is done. Old log are marked
  with a timestamp in seconds. The new Logclean script simplifies 
  cleanup of old logfiles.

- Command-table additions (@addcommand and family) are supported (a
  cleaned-up version of the MUX implementation). Three new conf parameters:
    - addcommands_match_blindly (defaults to 'yes', controls whether or not
      a 'Huh?' is produced when a match on an @addcommand'd command doesn't
      actually match a $command)
    - addcommands_obey_stop (defaults to 'no') controls whether or not an
      object with the Stop flag actually enforces a stop of match attempts
      when a match is found on an @addcomand for that object.
    - addcommands_obey_uselocks (defaults to 'no') controls whether or not
      the uselock is checked when an added command is matched.
  (The defaults are MUX behavior; we suggest that the reverse of the
  defaults is more desirable, though.)

- There are now command "hooks", implemented via the @hook command. Hooks
  are functions which execute before and/or after a built-in command;
  using side-effect functions, it is thus possible to customize a
  command without needing to write a full-blown @addcommand for it,
  or to execute things before/after every move through an exit.

- The term "zone" is now used for two things: MUX-style control-oriented
  zones, and 2.2-style local-master-rooms. Both types of zones default
  to on (local_master_rooms and have_zones conf parameters). MUX-style
  zones now use ControlLock rather than EnterLock, and only objects
  set CONTROL_OK may be controlled by a ZMO; this provides slightly
  better security. A new config parameter, 'autozone', controls
  whether or not objects are automatically zoned to their creator's
  ZMO at the time of their creation.

- The comsystem has been rewritten, resulting in a variety of minor
  syntax changes and alterations and enhancements to functionality.
  Default channel aliases can now be set with the public_calias and
  guests_calias config parameters.

- Variable destination exits are implemented, via the "variable" keyword
  and the ExitTo attribute; the destination of the exit is determined when
  it is used. The link_variable power has been added in support of this.
  (This works in a way similar to PennMUSH's variable destination exits,
  but ExitTo was used instead of Destination, to reduce likelihood of
  previous attribute conflicts.)

- Optional uselock checking for global aconnects has been implemented.
  (2.2 had this by default; MUX did not have this.)

- The disconnect reason is passed for master-room disconnects, too.

- When the new conf parameter dark_actions is enabled, objects set Dark
  still trigger @a-actions when moving, unless the /quiet switch is
  specified.

- When the new conf parameter exit_calls_move is enabled, trying to go
  through an exit by just typing its name is equivalent to typing
  'move <exit name>', allowing this to be intercepted by a move
  @addcommand.

- When the new conf parameter move_match_more is enabled, the move
  command matches exits like the main command parser does, i.e., it
  also checks global and zone exits, and in the case of multiple 
  matches, picks a random match.

- When the new conf parameter no_ambiguous_match is enabled, ambiguous
  matches always result in a random selection amongst the matches (i.e.,
  you will never get a "I don't know which one you mean!" message).

- The new conf parameter guest_starting_room allows Guest characters to
  start in a different default room than other characters.

- The MUSH manual is included in the distribution in helpfile format.
  (Thanks to Alierak and sTiLe.)

-----------------------------------------------------------------------------

CHANGES TO FLAGS AND POWERS

- There are now ten user-defined flags, MARKER0 through MARKER9. The flag
  names can be set through the flag_name option. Commands, functions, and
  other things with configurable permissions can also be tied to these
  flags (for instance, 'function_access lwho marker0').

- The access permissions of flags, including user-defined flags, can be
  set via the flag_access config directive. In addition to permissions
  for wizards, wizards/royalty, and god, there is a restrict_player
  option (only settable by Wizards on players, but settable by mortals
  on other types of things), and a privileged option (only settable by
  God on players, but settable by non-robot players on other types of
  things, if they themselves have the flag).

- The access permissions of powers can be set via the power_access config
  directive. The permission types available are the same as for flags.

- Command permissions can also be linked to the STAFF and HEAD flags.
  The "robot" permission has been removed, since nobody was using it.
  (The "no_robot" permission still exists, though.)

- A new flag, BLIND, suppresses has arrived / has left messages.

- A new flag, CONSTANT, prevents attributes from being set or altered
  on an object by anyone other than God.

- The FLOATING flag, if set on a player, now suppresses floating-room
  messages sent to that player.

- There is now a link_to_anything power, and an open_anywhere power, doing
  the obvious; these are handy for building-staff players.

- The see_hidden power now works. DARK is really two concepts, not showing
  up in the WHO list and not showing up in the contents list / moving
  silently. see_hidden allows seeing the former but does not affect the
  latter. These two concepts are now handled in a consistent manner
  within the server.

-----------------------------------------------------------------------------

CHANGES TO COMMANDS

- New /info switch to @attribute shows global attribute flags for a single
  attribute (similar to what '@list user_attributes' produces for all
  user-defined attributes).

- @chown now checks a ChownLock on CHOWN_OK objects.

- @chown, @chownall, @chzone, and @clone now strip flags in a consistent
  manner, as defined by the conf option stripped_flags. The /nostrip
  switch negates this stripping. For consistency, @clone/inherit no
  longer preserves IMMORTAL (but it still preserves INHERIT).

- @clone/preserve can be used by anyone, but you must control the original
  object's owner.

- A @cron facility allows tasks to be scheduled at specific times,
  in much the same way that Unix cron does.

- New /instant switch to @destroy causes objects to be instantly destroyed
  (rather than being queued for destruction at the next purge). Also, a
  new conf option, instant_recycle, controls whether or not Destroy_OK
  objects are instantly recycled (rather than being queued for destruction).

- New /pretty switch to examine and @decompile "pretty-prints" (with
  indentation) attributes. Based on Andrew Molitor's +pex-equivalent code.

- New /pairs switch to examine matches parentheses, brackets, and braces(),
  displaying them in ANSI colors. Based on Robby Griffin's ChaoticMUX code.

- New @freelist command moves an object to the head of the freelist,
  until the next dbck.

- New /noeval switch to @function defines a user-defined function whose
  arguments are not pre-evaluated.

- When you try to 'give' someone money, their ReceiveLock, rather than
  their UseLock, is checked.

- New @hashresize command dynamically resizes the hash tables. This is
  also automatically done at startup time.

- The @list options command has been reformatted and reorganized. A
  new command, @list params, lists additional configuration parameters.

- New /reply and /replyall switches to @mail allow replying to a mail
  message, including quoting it via the additional /quote switch.

- An object can @program another object if the first object or its owner
  has the Program power, or the first object controls the second. (This
  fuses the 2.2 and MUX models.)

- @program now reads attributes on the object's parent chain as well,
  not just the object itself (thus behaving like @trigger and friends).

- @ps now shows the attribute being waited upon, for non-Semaphore
  semaphore waits.

- @stats() and stats() now count the number of Going objects, as well
  as the number of objects of unknown (corrupted) type.

-----------------------------------------------------------------------------

CHANGES TO FUNCTIONS

- Functions for generic named variables, preserved in a manner similar to
  the stack (i.e., associated with a specific object, persistent until a
  restart is done), have been added. setx() sets a named variable,
  xvars() parses a list of strings into a list of variables, regparse()
  parses a regular expression into a list of variables, x() accesses
  a named variable (as does %_<var>), lvars() lists named variables,
  clearvars() mass-unsets named variables, and let() does a Scheme-style
  code block (with localized variables).

- Functions for generic named data structures (data types), preserved in
  a manner similar to the stack, in a LISP-like style. structure()
  defines a structure, unstructure() undefines one, construct() and
  load() create instances of structures, destruct() removes an instance
  of a structure, unload() dumps the components of an instance, z()
  gets the component of an instance, modify() modifies a component
  of an instance, and lstructures() and linstances() list the names
  of structures and instances, respectively.

- The equivalent of v(ATTRIBUTE) can now be accessed as '%=<ATTRIBUTE>',
  where the angle-brackets are literal.

- Functions that take output delimiters can take null output delimiters
  (symbolized by the token '@@') and newline ('%r') output delimiters.

- Booleans, as represented by functions such as t(), andbool(), and
  ifelse(), are now handled in a more sensible manner. All dbrefs
  (#0 and higher) are now considered true; #-1 and below are considered
  false. The string '#-1 <string>' (such as '#-1 NO MATCH') is considered
  false. All other strings beginning with '#' are treated like arbitrary
  strings, so, for instance, lists of dbrefs ('#0 #3 #5') are considered
  true. The old behavior can be obtained by enabling the booleans_oldstyle
  config parameter.

- The ansi() function compacts multiple ANSI attributes into a single
  ANSI code.

- String-manipulation functions, such as edit() and mid(), no longer
  strip ANSI characters, and @edit is better able to handle ANSI
  characters.

- An ANSI underline code, %xu, has been added.

- Added chomp() function -- akin to perl chomp(), it chomps off a
  trailing carriage-return newline from a string, if there is one.
  (Useful for dealing with pipe output.)

- Added command() function, which allows the execution of a variety of
  built-in commands in function form, such as @parent and @name.

- Added doing() function, to get @doing text.

- Added force(), trigger(), and wait() functions. Evil, but useful.

- iter() and list() can now be nested, and the nesting level can be
  obtained with '#!'. This changes the way parsing is done on both
  functions, and may affect the manner in which arguments to these
  functions should be escaped. For backwards compatibility, parse()
  works like the old iter() (unchanged behavior), and the new loop()
  function works like list() used to.

- The ladd(), lmin(), lmax(), lor(), land(), lorbool() and landbool()
  functions operate on lists, eliminating the necessity to fold() elements
  through their non-list counterparts.

- Conf parameter lattr_default_oldstyle controls what lattr() returns when
  it fails to match: if 'yes', this is empty (2.0.10p5 and before, 2.2.1
  and later), if 'no', this is #-1 NO MATCH (2.0.10p6, 2.2.0, MUX).
  Defaults to 'no'.

- Added localize() function, keeping changes to r-registers within the
  "local" scope of that evaluation.

- Added lrand() function, generating a delimiter-separated list of
  N random numbers between X and Y.

- The log() function can now taken an optional second argument, the base.

- The mix() function can now take an unequal number of elements in each
  list. (The lists are considered to be padded out with nulls.)

- If the new conf parameter, objeval_requires_control, is enabled (it
  is disabled by default), the objeval() function requires that you
  control the evaluator, not just have the same owner as it.

- Added ncomp() function for comparing numbers comp() style (very
  useful for sortby() afficianados).

- Added null() function, which just eats output. (Useful for doing things
  like iter() with side-effect functions, and getting rid of the resulting
  garbage spaces.)

- The nonzero() function outputs the result of an if/else condition on a
  non-zero result. (This provides MUX-style ifelse() behavior. ifelse()
  follows the TinyMUSH 2.2 behavior of conditioning on a boolean.)

- The objmem(<thing>) function does a MUX-style object-structure count; 
  objmem(<thing>/<wild>) does a 2.2-style attribute-text count. (Fuses
  the two models.)

- The pfind() function returns a dbref, or looks up a player. (This
  provides MUX-style pmatch() behavior. pmatch() now behaves like the
  MUX documentation said it should, which is identical to its PennMUSH
  predecessor.)

- step() does the equivalent of map() over multiple elements of a single
  list, with N elements at a time passed as %0, %1, etc.

- streq() does a case-insensitive comparison of two strings, returning 0 or 1.

- switchall() returns the string results from all cases that match.

- switch() and switchall() can nest the '#$' token, and the nesting
  level is available with '#!'.

- Vector functions no longer have a maximum dimension.

- vunit() can take an output delimiter.

- Added while() function. Evaluates elements of a list, until a
  termination condition is reached or the end of the list is reached.

-----------------------------------------------------------------------------

BUGFIX PATCHES

Patchlevel 1:
  - Fix of a potentially fatal error in the clearing of variables.
    [3.0a4; S'ryon]

=============================================================================
